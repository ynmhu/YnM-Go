package plugins

import (
	"encoding/json"
	"fmt"
	"math/rand"
	"os"
	"path/filepath"
	"strings"
	"time"
	"github.com/ynmhu/YnM-Go/config"
	"github.com/ynmhu/YnM-Go/irc"
)

// TamagotchiAllapot a kis√°llat aktu√°lis √©let√°llapot√°t reprezent√°lja
type TamagotchiAllapot int

const (
	AllapotTojas TamagotchiAllapot = iota
	AllapotBaba
	AllapotGyermek
	AllapotFelnott
	AllapotIdos
	AllapotHalott
)

func (a TamagotchiAllapot) String() string {
	switch a {
	case AllapotTojas:
		return "ü•ö Toj√°s"
	case AllapotBaba:
		return "üê£ Baba"
	case AllapotGyermek:
		return "üê§ Gyermek"
	case AllapotFelnott:
		return "üêî Feln≈ëtt"
	case AllapotIdos:
		return "ü¶Ö Id≈ës"
	case AllapotHalott:
		return "üíÄ Halott"
	default:
		return "‚ùì Ismeretlen"
	}
}

// Tamagotchi egy virtu√°lis kis√°llatot reprezent√°l
type Tamagotchi struct {
	Nev         string            `json:"nev"`
	Allapot     TamagotchiAllapot `json:"allapot"`
	Kor         int               `json:"kor"`         // √≥r√°kban
	Ehseg       int               `json:"ehseg"`       // 0-100 (0 = √©hez≈ë, 100 = j√≥llakott)
	Boldogsag   int               `json:"boldogsag"`   // 0-100
	Egeszseg    int               `json:"egeszseg"`    // 0-100
	Tisztasag   int               `json:"tisztasag"`   // 0-100
	UtoljaraEtrek    time.Time     `json:"utoljara_etrek"`
	UtoljaraJatszott time.Time     `json:"utoljara_jatszott"`
	UtoljaraTisztitva time.Time    `json:"utoljara_tisztitva"`
	SzuletesiIdo time.Time         `json:"szuletesi_ido"`
	HalalIdeje   *time.Time        `json:"halal_ideje,omitempty"`
	Tulajdonos  string            `json:"tulajdonos"`
}

// UjTamagotchi l√©trehoz egy √∫j Tamagotchi kis√°llatot
func UjTamagotchi(nev, tulajdonos string) *Tamagotchi {
	most := time.Now()
	return &Tamagotchi{
		Nev:         nev,
		Allapot:     AllapotTojas,
		Kor:         0,
		Ehseg:       70,
		Boldogsag:   80,
		Egeszseg:    100,
		Tisztasag:   100,
		UtoljaraEtrek:    most,
		UtoljaraJatszott: most,
		UtoljaraTisztitva: most,
		SzuletesiIdo: most,
		Tulajdonos:  tulajdonos,
	}
}

// Emoji visszaadja a kis√°llat aktu√°lis √°llapot√°hoz tartoz√≥ emojit
func (t *Tamagotchi) Emoji() string {
	if t.Allapot == AllapotHalott {
		return "üíÄ"
	}
	
	if t.Egeszseg < 20 {
		return "ü§í" // beteg
	}
	
	if t.Ehseg < 20 {
		return "üò´" // √©hes
	}
	
	if t.Boldogsag < 20 {
		return "üò¢" // szomor√∫
	}
	
	if t.Tisztasag < 20 {
		return "ü§¢" // piszkos
	}
	
	switch t.Allapot {
	case AllapotTojas:
		return "ü•ö"
	case AllapotBaba:
		return "üê£"
	case AllapotGyermek:
		return "üê§"
	case AllapotFelnott:
		return "üêî"
	case AllapotIdos:
		return "ü¶Ö"
	default:
		return "‚ùì"
	}
}

// Frissit friss√≠ti a kis√°llat √°llapot√°t az eltelt id≈ë alapj√°n
func (t *Tamagotchi) Frissit() {
	if t.Allapot == AllapotHalott {
		return
	}
	
	most := time.Now()
	
	// Kor n√∂vel√©se
	t.Kor = int(most.Sub(t.SzuletesiIdo).Hours())
	
	// √Ållapot friss√≠t√©se kor alapj√°n
	switch {
	case t.Kor < 1:
		t.Allapot = AllapotTojas
	case t.Kor < 24:
		t.Allapot = AllapotBaba
	case t.Kor < 72:
		t.Allapot = AllapotGyermek
	case t.Kor < 168:
		t.Allapot = AllapotFelnott
	default:
		t.Allapot = AllapotIdos
	}
	
	// Statisztik√°k roml√°sa id≈ëvel
	oraEtelNelkul := most.Sub(t.UtoljaraEtrek).Hours()
	oraJatekNelkul := most.Sub(t.UtoljaraJatszott).Hours()
	oraTisztitasNelkul := most.Sub(t.UtoljaraTisztitva).Hours()
	
	// √âhs√©g n√∂vekszik id≈ëvel
	t.Ehseg -= int(oraEtelNelkul * 5)
	if t.Ehseg < 0 {
		t.Ehseg = 0
	}
	
	// Boldogs√°g cs√∂kken id≈ëvel
	t.Boldogsag -= int(oraJatekNelkul * 3)
	if t.Boldogsag < 0 {
		t.Boldogsag = 0
	}
	
	// Tisztas√°g cs√∂kken id≈ëvel
	t.Tisztasag -= int(oraTisztitasNelkul * 2)
	if t.Tisztasag < 0 {
		t.Tisztasag = 0
	}
	
	// Eg√©szs√©get befoly√°solj√°k a t√∂bbi stat
	if t.Ehseg < 20 || t.Boldogsag < 20 || t.Tisztasag < 20 {
		t.Egeszseg -= 2
	} else if t.Ehseg > 80 && t.Boldogsag > 80 && t.Tisztasag > 80 {
		t.Egeszseg += 1
	}
	
	// Eg√©szs√©g korl√°toz√°sa
	if t.Egeszseg < 0 {
		t.Egeszseg = 0
	}
	if t.Egeszseg > 100 {
		t.Egeszseg = 100
	}
	
	// Hal√°l ellen≈ërz√©se
	if t.Egeszseg <= 0 {
		t.Allapot = AllapotHalott
		most := time.Now()
		t.HalalIdeje = &most
	}
}

// Etet meg√©teti a kis√°llatot
func (t *Tamagotchi) Etet() string {
	if t.Allapot == AllapotHalott {
		return "üíÄ Nem etethetsz egy halott kis√°llatot!"
	}
	
	if t.Ehseg >= 90 {
		return fmt.Sprintf("%s %s m√°r j√≥l lakott!", t.Emoji(), t.Nev)
	}
	
	t.Ehseg += 30
	if t.Ehseg > 100 {
		t.Ehseg = 100
	}
	t.UtoljaraEtrek = time.Now()
	
	return fmt.Sprintf("üçé Megetetted %s-t! √âhs√©g: %d/100", t.Nev, t.Ehseg)
}

// Jatszik j√°tszik a kis√°llattal
func (t *Tamagotchi) Jatszik() string {
	if t.Allapot == AllapotHalott {
		return "üíÄ Nem j√°tszhatsz egy halott kis√°llattal!"
	}
	
	if t.Boldogsag >= 90 {
		return fmt.Sprintf("%s %s m√°r nagyon boldog!", t.Emoji(), t.Nev)
	}
	
	t.Boldogsag += 25
	if t.Boldogsag > 100 {
		t.Boldogsag = 100
	}
	t.UtoljaraJatszott = time.Now()
	
	jatekok := []string{"labd√°z√°s", "b√∫j√≥cska", "frizbi", "fut√≥cska", "kutyusoz√°s"}
	jatek := jatekok[rand.Intn(len(jatekok))]
	
	return fmt.Sprintf("üéÆ J√°tszott√°l %s-t %s-val! Boldogs√°g: %d/100", jatek, t.Nev, t.Boldogsag)
}

// Tisztit megtiszt√≠tja a kis√°llatot
func (t *Tamagotchi) Tisztit() string {
	if t.Allapot == AllapotHalott {
		return "üíÄ Nem tiszt√≠thatsz egy halott kis√°llatot!"
	}
	
	if t.Tisztasag >= 90 {
		return fmt.Sprintf("%s %s m√°r tiszta!", t.Emoji(), t.Nev)
	}
	
	t.Tisztasag += 40
	if t.Tisztasag > 100 {
		t.Tisztasag = 100
	}
	t.UtoljaraTisztitva = time.Now()
	
	return fmt.Sprintf("üßº Megtiszt√≠tottad %s-t! Tisztas√°g: %d/100", t.Nev, t.Tisztasag)
}

// AllapotJelentes visszaadja a kis√°llat aktu√°lis √°llapotjelent√©s√©t
func (t *Tamagotchi) AllapotJelentes() string {
	if t.Allapot == AllapotHalott {
		return fmt.Sprintf("üíÄ %s meghalt %d √≥r√°s kor√°ban. Nyugodj√©k b√©k√©ben üò¢", t.Nev, t.Kor)
	}
	
	jelentes := fmt.Sprintf("%s **%s** (%s) - Kor: %d √≥ra\n", t.Emoji(), t.Nev, t.Allapot, t.Kor)
	jelentes += fmt.Sprintf("‚ù§Ô∏è Eg√©szs√©g: %d/100 | ÔøΩ √âhs√©g: %d/100 | üòä Boldogs√°g: %d/100 | üßº Tisztas√°g: %d/100\n", 
		t.Egeszseg, t.Ehseg, t.Boldogsag, t.Tisztasag)
	
	// √Ållapot√ºzenetek hozz√°ad√°sa
	var uzenetek []string
	if t.Egeszseg < 30 {
		uzenetek = append(uzenetek, "ü§í Betegnek √©rzi mag√°t")
	}
	if t.Ehseg < 30 {
		uzenetek = append(uzenetek, "üò´ Nagyon √©hes")
	}
	if t.Boldogsag < 30 {
		uzenetek = append(uzenetek, "üò¢ Szomor√∫")
	}
	if t.Tisztasag < 30 {
		uzenetek = append(uzenetek, "ü§¢ Nagyon piszkos")
	}
	
	if len(uzenetek) > 0 {
		jelentes += "√Ållapot: " + strings.Join(uzenetek, ", ")
	} else {
		jelentes += "√Ållapot: üòä Nagyon j√≥l √©rzi mag√°t!"
	}
	
	return jelentes
}

// TamagotchiPlugin kezeli a virtu√°lis kis√°llatokat IRC felhaszn√°l√≥k sz√°m√°ra
type TamagotchiPlugin struct {
	aktiv       bool
	kisallatok  map[string]*Tamagotchi // csatorna -> kis√°llat lek√©pez√©s
	adatKonyvtar string
	utolsoFrissites time.Time
	bot         *irc.Client
}

func NewTamagotchiPlugin(adatKonyvtar string, bot *irc.Client) *TamagotchiPlugin {
    return &TamagotchiPlugin{
        aktiv:      true,
        kisallatok: make(map[string]*Tamagotchi),
        adatKonyvtar: adatKonyvtar,
        utolsoFrissites: time.Now(),
        bot:        bot, // Bot referencia hozz√°adva
    }
}

func (p *TamagotchiPlugin) Nev() string {
	return "TamagotchiPlugin"
}

func (p *TamagotchiPlugin) Initialize(bot *irc.Client, config *config.Config) error {
	// Adatk√∂nyvt√°r l√©trehoz√°sa, ha nem l√©tezik
	if err := os.MkdirAll(p.adatKonyvtar, 0755); err != nil {
		return err
	}
	
	// Megl√©v≈ë kis√°llatok bet√∂lt√©se
	return p.kisallatokBetoltese()
}

func (p *TamagotchiPlugin) HandleMessage(uzenet irc.Message) string {
    if !p.aktiv {
        return ""
    }
    
    szoveg := strings.TrimSpace(uzenet.Text)
    reszek := strings.Fields(szoveg)
    
    if len(reszek) == 0 {
        return ""
    }
    
    parancs := strings.ToLower(reszek[0])
    
    switch parancs {
    case "!kisallat", "!tamagotchi":
        if len(reszek) < 2 {
            return p.segitoSzoveg()
        }
        
        alparancs := strings.ToLower(reszek[1])
        switch alparancs {
        case "uj", "letrehoz":
            if len(reszek) < 3 {
                return "Haszn√°lat: !kisallat uj <n√©v>"
            }
            nev := strings.Join(reszek[2:], " ")
            return p.kisallatLetrehozasValasz(uzenet.Channel, nev, uzenet.Nick)
            
        case "allapot", "status":
            return p.allapotValasz(uzenet.Channel)
            
        case "etet":
            return p.etetValasz(uzenet.Channel, uzenet.Nick)
            
        case "jatszik":
            return p.jatszikValasz(uzenet.Channel, uzenet.Nick)
            
        case "tisztit":
            return p.tisztitValasz(uzenet.Channel, uzenet.Nick)
            
        case "segits√©g":
            return p.segitoSzoveg()
            
        default:
            return p.segitoSzoveg()
        }
    }
    
    return ""
}
func (p *TamagotchiPlugin) kisallatLetrehozasValasz(csatorna, nev, tulajdonos string) string {
	//fmt.Printf("[DEBUG] kisallatLetrehozasValasz: tulajdonos = %q\n", tulajdonos)
	if _, letezik := p.kisallatok[csatorna]; letezik {
		return fmt.Sprintf("M√°r van kis√°llat ebben a csatorn√°ban! Haszn√°ld a '!kisallat allapot' parancsot, hogy megn√©zd %s √°llapot√°t", p.kisallatok[csatorna].Nev)
	}
	
	if len(nev) > 20 {
		return "A kis√°llat neve t√∫l hossz√∫! Maximum 20 karakter lehet."
	}
	
	kisallat := UjTamagotchi(nev, tulajdonos)
	p.kisallatok[csatorna] = kisallat
	p.kisallatokMentese()
	
	return fmt.Sprintf("ü•ö %s l√©trehozott egy √∫j kis√°llatot %s n√©ven! Hamarosan kikel... Haszn√°ld a '!kisallat segits√©g' parancsot a lehet≈ës√©gek megtekint√©s√©hez.", tulajdonos, nev)
}

func (p *TamagotchiPlugin) allapotValasz(csatorna string) string {
    kisallat, letezik := p.kisallatok[csatorna]
    if !letezik {
        return "Nincs kis√°llat ebben a csatorn√°ban! Haszn√°ld: !kisallat uj <n√©v>"
    }
    
    // Egyszer≈±bb form√°tum
    return fmt.Sprintf("%s %s (%s) | ‚ù§Ô∏è%d üçé%d üòä%d üßº%d | %s",
        kisallat.Emoji(),
        kisallat.Nev,
        kisallat.Allapot,
        kisallat.Egeszseg,
        kisallat.Ehseg,
        kisallat.Boldogsag,
        kisallat.Tisztasag,
        "Haszn√°ld: !kisallat etet/jatszik/tisztit")
}

func (p *TamagotchiPlugin) etetValasz(csatorna, kuldo string) string {
	kisallat, letezik := p.kisallatok[csatorna]
	if !letezik {
		return "Nincs kis√°llat ebben a csatorn√°ban! Haszn√°ld a '!kisallat uj <n√©v>' parancsot egy l√©trehoz√°s√°hoz."
	}
	
	valasz := kisallat.Etet()
	p.kisallatokMentese()
	return valasz
}

func (p *TamagotchiPlugin) jatszikValasz(csatorna, kuldo string) string {
	kisallat, letezik := p.kisallatok[csatorna]
	if !letezik {
		return "Nincs kis√°llat ebben a csatorn√°ban! Haszn√°ld a '!kisallat uj <n√©v>' parancsot egy l√©trehoz√°s√°hoz."
	}
	
	valasz := kisallat.Jatszik()
	p.kisallatokMentese()
	return valasz
}

func (p *TamagotchiPlugin) tisztitValasz(csatorna, kuldo string) string {
	kisallat, letezik := p.kisallatok[csatorna]
	if !letezik {
		return "Nincs kis√°llat ebben a csatorn√°ban! Haszn√°ld a '!kisallat uj <n√©v>' parancsot egy l√©trehoz√°s√°hoz."
	}
	
	valasz := kisallat.Tisztit()
	p.kisallatokMentese()
	return valasz
}

func (p *TamagotchiPlugin) segitoSzoveg() string {
	return "üê£ Tamagotchi Kis√°llat Parancsok !kisallat uj <n√©v> - √öj kis√°llat l√©trehoz√°sa !kisallat allapot - Kis√°llat √°llapot√°nak ellen≈ërz√©se !kisallat etet - Kis√°llat etet√©se !kisallat jatszik - J√°t√©k a kis√°llattal !kisallat tisztit - Kis√°llat tiszt√≠t√°sa !kisallat segits√©g - Seg√≠ts√©g megjelen√≠t√©se Tartsd a kis√°llatod boldognak, j√≥l lakottnak √©s tiszt√°n! üéÆ"
}

func (p *TamagotchiPlugin) veletlenEsemeny(csatorna string, kisallat *Tamagotchi) string {
	if kisallat.Allapot == AllapotHalott {
		return ""
	}
	
	esemenyek := []string{
		fmt.Sprintf("üéµ %s boldogan √©nekel!", kisallat.Nev),
		fmt.Sprintf("üò¥ %s szuny√°l...", kisallat.Nev),
		fmt.Sprintf("ü¶ã %s pillang√≥t kerget!", kisallat.Nev),
		fmt.Sprintf("üåü %s √∂r√∂mt≈ël ragyog!", kisallat.Nev),
		fmt.Sprintf("üé≠ %s t√°ncol!", kisallat.Nev),
	}
	
	// Negat√≠v esem√©nyek hozz√°ad√°sa, ha elhanyagolj√°k
	if kisallat.Ehseg < 40 {
		esemenyek = append(esemenyek, fmt.Sprintf("üò´ %s √©telt keres...", kisallat.Nev))
	}
	if kisallat.Boldogsag < 40 {
		esemenyek = append(esemenyek, fmt.Sprintf("üò¢ %s mag√°nyosnak √©rzi mag√°t...", kisallat.Nev))
	}
	if kisallat.Tisztasag < 40 {
		esemenyek = append(esemenyek, fmt.Sprintf("ü§¢ %s koszos lesz...", kisallat.Nev))
	}
	
	if rand.Intn(100) < 20 { // 20% es√©ly v√©letlen esem√©nyre
		return esemenyek[rand.Intn(len(esemenyek))]
	}
	
	return ""
}

// IdozitettFrissites implement√°lja a Plugin interf√©szt az id≈ëz√≠tett friss√≠t√©sekhez
func (p *TamagotchiPlugin) IdozitettFrissites() []irc.Message {
	if !p.aktiv {
		return nil
	}
	
	var uzenetek []irc.Message
	
	for csatorna, kisallat := range p.kisallatok {
		kisallat.Frissit()
		
		if kisallat.Allapot == AllapotHalott && kisallat.HalalIdeje != nil && time.Since(*kisallat.HalalIdeje) < time.Minute {
			uzenetek = append(uzenetek, irc.Message{
				Channel: csatorna, // Csatorna -> Channel
				Text:    fmt.Sprintf("üíÄ Jaj ne! %s meghalt! üò¢ Nyugodj√©k b√©k√©ben...", kisallat.Nev), // Szoveg -> Text
			})
		}
		
		if time.Since(p.utolsoFrissites) >= 30*time.Minute {
			if esemenyUzenet := p.veletlenEsemeny(csatorna, kisallat); esemenyUzenet != "" {
				uzenetek = append(uzenetek, irc.Message{
					Channel: csatorna, // Csatorna -> Channel
					Text:    esemenyUzenet, // Szoveg -> Text
				})
			}
		}
	}
	
	if time.Since(p.utolsoFrissites) >= 30*time.Minute {
		p.utolsoFrissites = time.Now()
		p.kisallatokMentese()
	}
	
	return uzenetek
}

func (p *TamagotchiPlugin) kisallatokMentese() error {
	adatok, err := json.MarshalIndent(p.kisallatok, "", "  ")
	if err != nil {
		return err
	}
	
	return os.WriteFile(filepath.Join(p.adatKonyvtar, "kisallatok.json"), adatok, 0644)
}

func (p *TamagotchiPlugin) kisallatokBetoltese() error {
	fajlNev := filepath.Join(p.adatKonyvtar, "kisallatok.json")
	adatok, err := os.ReadFile(fajlNev)
	if err != nil {
		if os.IsNotExist(err) {
			return nil // M√©g nincs kis√°llat f√°jl, ez rendben van
		}
		return err
	}
	
	return json.Unmarshal(adatok, &p.kisallatok)
}

func (p *TamagotchiPlugin) Shutdown() error {
	p.aktiv = false
	return p.kisallatokMentese()
}
func (p *TamagotchiPlugin) OnTick() []irc.Message {
    return nil
}